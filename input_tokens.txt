Token(STATEMENT, public class testError)
Token(LBRACE, {)
Token(METHOD, public int add(int a, int b))
Token(LBRACE, {)
Token(STATEMENT, return a+b;)
Token(RBRACE, })
Token(METHOD, int addCheck(int a, int b))
Token(LBRACE, {)
Token(IF, if(a > 0 && b > 0))
Token(LBRACE, {)
Token(STATEMENT, return a+b+a;)
Token(ELSE, else)
Token(LBRACE, {)
Token(STATEMENT, return a + b;)
Token(RBRACE, })
Token(RBRACE, })
Token(METHOD, protected static void print(String a))
Token(LBRACE, {)
Token(STATEMENT, System.out.println(a);)
Token(RBRACE, })
Token(METHOD, void printTwice(String a))
Token(LBRACE, {)
Token(STATEMENT, System.out.println(a);)
Token(STATEMENT, System.out.println(a);)
Token(RBRACE, })
Token(METHOD, public static void main(String[] args))
Token(LBRACE, {)
Token(STATEMENT, int one = 1;)
Token(STATEMENT, int two = 2;)
Token(STATEMENT, String apple = "apple";)
Token(STATEMENT, testOriginal a = new testOriginal();)
Token(STATEMENT, int result = a.add(one, two);)
Token(IF, if (result == 1))
Token(STATEMENT, System.out.println("one");)
Token(RBRACE, })
Token(METHOD, else if (result == 2))
Token(LBRACE, {)
Token(STATEMENT, System.out.println("two");)
Token(RBRACE, })
Token(ELSE, else)
Token(LBRACE, {)
Token(STATEMENT, System.out.println("other");)
Token(SWITCH, switch (result))
Token(LBRACE, {)
Token(STATEMENT, case 1:)
Token(STATEMENT, System.out.println("one");)
Token(STATEMENT, break;)
Token(STATEMENT, case 2:)
Token(STATEMENT, System.out.println("two");)
Token(STATEMENT, break;)
Token(STATEMENT, case 3:)
Token(STATEMENT, System.out.println("three");)
Token(STATEMENT, break;)
Token(STATEMENT, default:)
Token(STATEMENT, System.out.println("other");)
Token(STATEMENT, int count = 0;)
Token(DO, do)
Token(LBRACE, {)
Token(STATEMENT, System.out.println(count);)
Token(STATEMENT, count++;)
Token(RBRACE, })
Token(WHILE, while(count < 10);)
Token(FOR, for(int i = 0; i < apple.length(); i++))
Token(LBRACE, {)
Token(STATEMENT, System.out.println(apple.charAt(i));)
Token(STATEMENT, int count2 = 0;)
Token(WHILE, while (count2 < 9))
Token(LBRACE, {)
Token(STATEMENT, System.out.println(apple);)
Token(STATEMENT, count2 ++;)
Token(RBRACE, })
Token(STATEMENT, //Big nested test)
Token(IF, if(result == 3))
Token(LBRACE, {)
Token(IF, if (apple == "apple"))
Token(LBRACE, {)
Token(IF, if(true))
Token(LBRACE, {)
Token(STATEMENT, System.out.println("all true");)
Token(RBRACE, })
Token(RBRACE, })
Token(METHOD, else if(apple == "banana"))
Token(LBRACE, {)
Token(STATEMENT, System.out.println("Not true");)
Token(RBRACE, })
Token(RBRACE, })
Token(ELSE, else)
Token(LBRACE, {)
Token(STATEMENT, System.out.println("other");)
Token(RBRACE, })
Token(RBRACE, })
Token(RBRACE, })
